diff --git a/ggml/src/ggml-cann.cpp b/ggml/src/ggml-cann.cpp
index ec3c0a68..587ff267 100644
--- a/ggml/src/ggml-cann.cpp
+++ b/ggml/src/ggml-cann.cpp
@@ -407,10 +407,11 @@ struct ggml_cann_pool_vmm : public ggml_cann_pool {
             // add to the pool
             pool_size += reserve_size;
 
-            // GGML_LOG_INFO("cann pool[%d]: size increased to %llu MB (
-            // reserved %llu MB)\n",
-            //       device, (unsigned long long) (pool_size/1024/1024),
-            //       (unsigned long long) (reserve_size/1024/1024));
+#ifdef DEBUG_CANN_MALLOC
+             GGML_LOG_INFO("cann pool[%d]: size increased to %llu MB (reserved %llu MB)\n",
+                   device, (unsigned long long) (pool_size/1024/1024),
+                   (unsigned long long) (reserve_size/1024/1024));
+#endif
         }
 
         GGML_ASSERT(pool_addr != 0);
@@ -1712,11 +1713,15 @@ static bool ggml_backend_cann_supports_op(ggml_backend_t backend,
             switch (op->src[0]->type) {
                 case GGML_TYPE_F16:
                 case GGML_TYPE_F32:
+                    return true;
                 case GGML_TYPE_Q8_0:
                     // TODO: fix me
                     // Current groupsize should not be greater than k-1 in
                     // aclnnWeightQuantBatchMatmulV2GetWorkspaceSize().
                 case GGML_TYPE_Q4_0:
+                    if (op->src[0]->ne[1] > 65535) {
+                        return false;
+                    }
                     return true;
                 default:
                     return false;
@@ -1729,8 +1734,12 @@ static bool ggml_backend_cann_supports_op(ggml_backend_t backend,
             switch (op->src[0]->type) {
                 case GGML_TYPE_F32:
                 case GGML_TYPE_F16:
+                    return true;
                 case GGML_TYPE_Q4_0:
                 case GGML_TYPE_Q8_0:
+                    if (op->src[0]->ne[1] > 65535) {
+                        return false;
+                    }
                     return true;
                 default:
                     return false;
@@ -1740,8 +1749,12 @@ static bool ggml_backend_cann_supports_op(ggml_backend_t backend,
             switch (op->type) {
                 case GGML_TYPE_F32:
                 case GGML_TYPE_F16:
+                    return true;
                 case GGML_TYPE_Q8_0:
                 case GGML_TYPE_Q4_0:
+                    if (op->src[0]->ne[1] > 65535) {
+                        return false;
+                    }
                     return true;
                 default:
                     return false;
diff --git a/ggml/src/ggml-cann/common.h b/ggml/src/ggml-cann/common.h
index edfa4961..2a74515f 100644
--- a/ggml/src/ggml-cann/common.h
+++ b/ggml/src/ggml-cann/common.h
@@ -213,8 +213,7 @@ struct ggml_backend_cann_context {
     std::string name;                /**< Name of the device. */
     aclrtEvent copy_event = nullptr; /**< Event for managing copy operations. */
 
-    aclrtStream streams[GGML_CANN_MAX_STREAMS] = {
-        {nullptr}}; /**< Array of streams for the device. */
+    aclrtStream streams[GGML_CANN_MAX_STREAMS] = {nullptr}; /**< Array of streams for the device. */
 
     /**
      * @brief Constructor for initializing the context with a given device.
